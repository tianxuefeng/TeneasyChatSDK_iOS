// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: api/core/gateway.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Api_Core_GatewayNodeRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 网关节点id
  var gatewayID: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Api_Core_GatewayRegisterResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 链接id
  var websocketID: UInt64 = 0

  /// 链接创建时间
  var websocketTime: Int64 = 0

  /// 链接标记
  var websocketFlag: Bool = false

  /// 上次链接id
  var lastSocketID: UInt64 = 0

  /// 上次链接时间
  var lastSocketTime: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Api_Core_OnlineTenantWorkers {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 商户id
  var tenant: Int32 = 0

  /// 客服id
  var workers: [Int32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Api_Core_GatewayBeaconRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 网关节点id
  var gatewayID: Int32 = 0

  /// 心跳间隔时间
  var duration: Int32 = 0

  /// 根据客服心跳汇总的在线客服, 按商户分组
  var tenants: [Api_Core_OnlineTenantWorkers] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Api_Core_GatewayTeardownRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 网关节点id
  var gatewayID: Int32 = 0

  /// 链接id
  var websocketList: [UInt64] = []

  /// 网关离线
  var gatewayOffline: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Api_Core_GatewayNodeRequest: @unchecked Sendable {}
extension Api_Core_GatewayRegisterResponse: @unchecked Sendable {}
extension Api_Core_OnlineTenantWorkers: @unchecked Sendable {}
extension Api_Core_GatewayBeaconRequest: @unchecked Sendable {}
extension Api_Core_GatewayTeardownRequest: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "api.core"

extension Api_Core_GatewayNodeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GatewayNodeRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gateway_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.gatewayID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.gatewayID != 0 {
      try visitor.visitSingularInt32Field(value: self.gatewayID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Api_Core_GatewayNodeRequest, rhs: Api_Core_GatewayNodeRequest) -> Bool {
    if lhs.gatewayID != rhs.gatewayID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Core_GatewayRegisterResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GatewayRegisterResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "websocket_id"),
    2: .standard(proto: "websocket_time"),
    3: .standard(proto: "websocket_flag"),
    4: .standard(proto: "last_socket_id"),
    5: .standard(proto: "last_socket_time"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.websocketID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.websocketTime) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.websocketFlag) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.lastSocketID) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.lastSocketTime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.websocketID != 0 {
      try visitor.visitSingularUInt64Field(value: self.websocketID, fieldNumber: 1)
    }
    if self.websocketTime != 0 {
      try visitor.visitSingularInt64Field(value: self.websocketTime, fieldNumber: 2)
    }
    if self.websocketFlag != false {
      try visitor.visitSingularBoolField(value: self.websocketFlag, fieldNumber: 3)
    }
    if self.lastSocketID != 0 {
      try visitor.visitSingularUInt64Field(value: self.lastSocketID, fieldNumber: 4)
    }
    if self.lastSocketTime != 0 {
      try visitor.visitSingularInt64Field(value: self.lastSocketTime, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Api_Core_GatewayRegisterResponse, rhs: Api_Core_GatewayRegisterResponse) -> Bool {
    if lhs.websocketID != rhs.websocketID {return false}
    if lhs.websocketTime != rhs.websocketTime {return false}
    if lhs.websocketFlag != rhs.websocketFlag {return false}
    if lhs.lastSocketID != rhs.lastSocketID {return false}
    if lhs.lastSocketTime != rhs.lastSocketTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Core_OnlineTenantWorkers: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OnlineTenantWorkers"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tenant"),
    2: .same(proto: "workers"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.tenant) }()
      case 2: try { try decoder.decodeRepeatedInt32Field(value: &self.workers) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.tenant != 0 {
      try visitor.visitSingularInt32Field(value: self.tenant, fieldNumber: 1)
    }
    if !self.workers.isEmpty {
      try visitor.visitPackedInt32Field(value: self.workers, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Api_Core_OnlineTenantWorkers, rhs: Api_Core_OnlineTenantWorkers) -> Bool {
    if lhs.tenant != rhs.tenant {return false}
    if lhs.workers != rhs.workers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Core_GatewayBeaconRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GatewayBeaconRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gateway_id"),
    2: .same(proto: "duration"),
    3: .same(proto: "tenants"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.gatewayID) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.duration) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.tenants) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.gatewayID != 0 {
      try visitor.visitSingularInt32Field(value: self.gatewayID, fieldNumber: 1)
    }
    if self.duration != 0 {
      try visitor.visitSingularInt32Field(value: self.duration, fieldNumber: 2)
    }
    if !self.tenants.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tenants, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Api_Core_GatewayBeaconRequest, rhs: Api_Core_GatewayBeaconRequest) -> Bool {
    if lhs.gatewayID != rhs.gatewayID {return false}
    if lhs.duration != rhs.duration {return false}
    if lhs.tenants != rhs.tenants {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Core_GatewayTeardownRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GatewayTeardownRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gateway_id"),
    2: .standard(proto: "websocket_list"),
    3: .standard(proto: "gateway_offline"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.gatewayID) }()
      case 2: try { try decoder.decodeRepeatedUInt64Field(value: &self.websocketList) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.gatewayOffline) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.gatewayID != 0 {
      try visitor.visitSingularInt32Field(value: self.gatewayID, fieldNumber: 1)
    }
    if !self.websocketList.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.websocketList, fieldNumber: 2)
    }
    if self.gatewayOffline != false {
      try visitor.visitSingularBoolField(value: self.gatewayOffline, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Api_Core_GatewayTeardownRequest, rhs: Api_Core_GatewayTeardownRequest) -> Bool {
    if lhs.gatewayID != rhs.gatewayID {return false}
    if lhs.websocketList != rhs.websocketList {return false}
    if lhs.gatewayOffline != rhs.gatewayOffline {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
