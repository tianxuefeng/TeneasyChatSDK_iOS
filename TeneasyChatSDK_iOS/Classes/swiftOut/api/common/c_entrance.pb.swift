// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: api/common/c_entrance.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Api_Common_LinkType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknown // = 0
  case h5 // = 1
  case web // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .h5
    case 2: self = .web
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .h5: return 1
    case .web: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Api_Common_LinkType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Api_Common_LinkType] = [
    .unknown,
    .h5,
    .web,
  ]
}

#endif  // swift(>=4.2)

struct Api_Common_Entrance {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 入口id
  var entranceID: UInt32 = 0

  /// 入口名称
  var name: String = String()

  /// 用户昵称
  var nick: String = String()

  /// 用户头像
  var avatar: String = String()

  /// 咨询类型引导文案
  var guide: String = String()

  /// 咨询文案id
  var consultIds: [Int32] = []

  /// 转默认咨询文案的时间
  var changeDefaultTime: String = String()

  /// h5链接
  var h5Link: String = String()

  /// web链接
  var webLink: String = String()

  /// 内部参数
  var internalParameters: String = String()

  /// 客服联盟app参数
  var appParameters: String = String()

  /// 接入文档链接
  var accessLink: String = String()

  /// 默认咨询文案id
  var defaultConsultID: Int32 = 0

  /// h5|web用户连接凭证
  var certificate: String = String()

  /// 分配一线客服
  var workerName: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Api_Common_Consult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 咨询id
  var consultID: UInt32 = 0

  /// 咨询类型名称
  var name: String = String()

  /// 咨询类型文案
  var guide: String = String()

  /// 接待客服组
  var workerGroupIds: [Int64] = []

  /// 接待客服
  var workerIds: [Int32] = []

  /// 接待客服组名称
  var workerGroupNames: String = String()

  /// 接待客服
  var workerNames: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Api_Common_LinkType: @unchecked Sendable {}
extension Api_Common_Entrance: @unchecked Sendable {}
extension Api_Common_Consult: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "api.common"

extension Api_Common_LinkType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LINK_TYPE_UNKNOWN"),
    1: .same(proto: "LINK_TYPE_H5"),
    2: .same(proto: "LINK_TYPE_WEB"),
  ]
}

extension Api_Common_Entrance: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Entrance"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "entrance_id"),
    2: .same(proto: "name"),
    3: .same(proto: "nick"),
    4: .same(proto: "avatar"),
    5: .same(proto: "guide"),
    6: .standard(proto: "consult_ids"),
    7: .standard(proto: "change_default_time"),
    8: .standard(proto: "h5_link"),
    9: .standard(proto: "web_link"),
    10: .standard(proto: "internal_parameters"),
    11: .standard(proto: "app_parameters"),
    12: .standard(proto: "access_link"),
    13: .standard(proto: "default_consult_id"),
    14: .same(proto: "certificate"),
    15: .standard(proto: "worker_name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.entranceID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.nick) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.avatar) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.guide) }()
      case 6: try { try decoder.decodeRepeatedInt32Field(value: &self.consultIds) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.changeDefaultTime) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.h5Link) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.webLink) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.internalParameters) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.appParameters) }()
      case 12: try { try decoder.decodeSingularStringField(value: &self.accessLink) }()
      case 13: try { try decoder.decodeSingularInt32Field(value: &self.defaultConsultID) }()
      case 14: try { try decoder.decodeSingularStringField(value: &self.certificate) }()
      case 15: try { try decoder.decodeRepeatedStringField(value: &self.workerName) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.entranceID != 0 {
      try visitor.visitSingularUInt32Field(value: self.entranceID, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.nick.isEmpty {
      try visitor.visitSingularStringField(value: self.nick, fieldNumber: 3)
    }
    if !self.avatar.isEmpty {
      try visitor.visitSingularStringField(value: self.avatar, fieldNumber: 4)
    }
    if !self.guide.isEmpty {
      try visitor.visitSingularStringField(value: self.guide, fieldNumber: 5)
    }
    if !self.consultIds.isEmpty {
      try visitor.visitPackedInt32Field(value: self.consultIds, fieldNumber: 6)
    }
    if !self.changeDefaultTime.isEmpty {
      try visitor.visitSingularStringField(value: self.changeDefaultTime, fieldNumber: 7)
    }
    if !self.h5Link.isEmpty {
      try visitor.visitSingularStringField(value: self.h5Link, fieldNumber: 8)
    }
    if !self.webLink.isEmpty {
      try visitor.visitSingularStringField(value: self.webLink, fieldNumber: 9)
    }
    if !self.internalParameters.isEmpty {
      try visitor.visitSingularStringField(value: self.internalParameters, fieldNumber: 10)
    }
    if !self.appParameters.isEmpty {
      try visitor.visitSingularStringField(value: self.appParameters, fieldNumber: 11)
    }
    if !self.accessLink.isEmpty {
      try visitor.visitSingularStringField(value: self.accessLink, fieldNumber: 12)
    }
    if self.defaultConsultID != 0 {
      try visitor.visitSingularInt32Field(value: self.defaultConsultID, fieldNumber: 13)
    }
    if !self.certificate.isEmpty {
      try visitor.visitSingularStringField(value: self.certificate, fieldNumber: 14)
    }
    if !self.workerName.isEmpty {
      try visitor.visitRepeatedStringField(value: self.workerName, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Api_Common_Entrance, rhs: Api_Common_Entrance) -> Bool {
    if lhs.entranceID != rhs.entranceID {return false}
    if lhs.name != rhs.name {return false}
    if lhs.nick != rhs.nick {return false}
    if lhs.avatar != rhs.avatar {return false}
    if lhs.guide != rhs.guide {return false}
    if lhs.consultIds != rhs.consultIds {return false}
    if lhs.changeDefaultTime != rhs.changeDefaultTime {return false}
    if lhs.h5Link != rhs.h5Link {return false}
    if lhs.webLink != rhs.webLink {return false}
    if lhs.internalParameters != rhs.internalParameters {return false}
    if lhs.appParameters != rhs.appParameters {return false}
    if lhs.accessLink != rhs.accessLink {return false}
    if lhs.defaultConsultID != rhs.defaultConsultID {return false}
    if lhs.certificate != rhs.certificate {return false}
    if lhs.workerName != rhs.workerName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Common_Consult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Consult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "consult_id"),
    2: .same(proto: "name"),
    3: .same(proto: "guide"),
    4: .standard(proto: "worker_group_ids"),
    5: .standard(proto: "worker_ids"),
    6: .standard(proto: "worker_group_names"),
    7: .standard(proto: "worker_names"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.consultID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.guide) }()
      case 4: try { try decoder.decodeRepeatedInt64Field(value: &self.workerGroupIds) }()
      case 5: try { try decoder.decodeRepeatedInt32Field(value: &self.workerIds) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.workerGroupNames) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.workerNames) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.consultID != 0 {
      try visitor.visitSingularUInt32Field(value: self.consultID, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.guide.isEmpty {
      try visitor.visitSingularStringField(value: self.guide, fieldNumber: 3)
    }
    if !self.workerGroupIds.isEmpty {
      try visitor.visitPackedInt64Field(value: self.workerGroupIds, fieldNumber: 4)
    }
    if !self.workerIds.isEmpty {
      try visitor.visitPackedInt32Field(value: self.workerIds, fieldNumber: 5)
    }
    if !self.workerGroupNames.isEmpty {
      try visitor.visitSingularStringField(value: self.workerGroupNames, fieldNumber: 6)
    }
    if !self.workerNames.isEmpty {
      try visitor.visitSingularStringField(value: self.workerNames, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Api_Common_Consult, rhs: Api_Common_Consult) -> Bool {
    if lhs.consultID != rhs.consultID {return false}
    if lhs.name != rhs.name {return false}
    if lhs.guide != rhs.guide {return false}
    if lhs.workerGroupIds != rhs.workerGroupIds {return false}
    if lhs.workerIds != rhs.workerIds {return false}
    if lhs.workerGroupNames != rhs.workerGroupNames {return false}
    if lhs.workerNames != rhs.workerNames {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
